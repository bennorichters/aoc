import 'dart:math';

void main() {
  var result = fishes.fold(
      0,
      (int previousValue, int element) =>
          previousValue + offspring(Point(element, 256)));

  print(result);
}

Map<Point, int> cache = {};

int offspring(Point data) {
  if (cache.containsKey(data)) return cache[data]!;
  if (data.y == 0) return 1;

  return cache[data] = (data.x == 0)
      ? offspring(Point(6, data.y - 1)) + offspring(Point(8, data.y - 1))
      : offspring(Point(data.x - 1, data.y - 1));
}

// var fishes = [3, 4, 3, 1, 2];
var fishes = [
  1,
  3,
  4,
  1,
  5,
  2,
  1,
  1,
  1,
  1,
  5,
  1,
  5,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  1,
  1,
  4,
  1,
  1,
  2,
  3,
  1,
  5,
  1,
  4,
  1,
  2,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  5,
  3,
  3,
  5,
  1,
  1,
  1,
  1,
  4,
  1,
  1,
  3,
  1,
  1,
  1,
  2,
  3,
  4,
  1,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  3,
  1,
  3,
  1,
  2,
  5,
  1,
  1,
  1,
  1,
  5,
  1,
  5,
  5,
  1,
  1,
  1,
  1,
  3,
  4,
  4,
  4,
  1,
  5,
  1,
  1,
  4,
  4,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  2,
  1,
  4,
  1,
  1,
  4,
  1,
  5,
  5,
  1,
  2,
  2,
  1,
  5,
  4,
  2,
  1,
  1,
  5,
  1,
  5,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  4,
  1,
  2,
  1,
  1,
  5,
  1,
  1,
  4,
  1,
  4,
  5,
  3,
  5,
  5,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  3,
  5,
  1,
  2,
  1,
  2,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  4,
  5,
  4,
  1,
  3,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  1,
  1,
  1,
  5,
  1,
  1,
  4,
  1,
  5,
  2,
  4,
  1,
  1,
  1,
  2,
  1,
  1,
  4,
  4,
  1,
  2,
  1,
  1,
  1,
  1,
  5,
  3,
  1,
  1,
  1,
  1,
  4,
  1,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  2,
  5,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1
];
